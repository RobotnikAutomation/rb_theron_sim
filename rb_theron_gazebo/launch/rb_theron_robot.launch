<?xml version="1.0"?>
<launch>

	<arg name="id_robot" default="robot"/>
	<arg name="prefix" value="$(arg id_robot)_"/>
	<arg name="xacro_robot" default="rb_theron.urdf.xacro"/>

	<arg name="x_init_pose" default="0"/>
	<arg name="y_init_pose" default="0"/>
	<arg name="z_init_pose" default="0.5"/>
	<arg name="init_yaw" default="0"/>

	<arg name="launch_gmapping" default="false"/>
	<arg name="launch_amcl" default="false"/>
	<arg name="launch_mapserver" default="false"/>
	<arg name="global_frame" default="$(arg prefix)map"/>
	<arg name="map_file" default="$(find rb_theron_localization)/maps/empty/empty.yaml"/>
	<arg name="launch_move_base" default="false"/>
	<arg name="launch_navigation" default="true"/>
	<arg name="launch_pad" default="false"/>
	<arg name="launch_perception" default="true"/>
	<arg name="launch_reflector_locator" default="true"/>
	<arg name="launch_rlc" default="true"/>
	<arg name="launch_rostful" default="true"/>
	<arg name="rostful_host" default="192.168.0.200"/>
	<arg name="rostful_init_delay" default="10"/>
	<arg name="rostful_port" default="8080"/>
	<!-- <arg name="launch_base_hw_sim" default="false"/> -->
	<arg name="use_ros_planar_move_plugin" default="true"/>


	<!-- BEGIN ROBOT-->
	<group ns="$(arg id_robot)">

		<!-- Load the URDF into the ROS Parameter Server -->
		<param name="robot_description" command="$(find xacro)/xacro '$(find rb_theron_description)/robots/$(arg xacro_robot)' prefix:=$(arg prefix) ros_planar_move_plugin:=$(arg use_ros_planar_move_plugin) --inorder"/>

		<!-- Spawner model into gazebo -->
		<node name="urdf_spawner_rb_theron_model" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen" args="-x $(arg x_init_pose) -y $(arg y_init_pose) -z $(arg z_init_pose) -Y $(arg init_yaw) -urdf -param robot_description -model $(arg id_robot)" />

		<!-- Robot state publisher -->
		<node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="false" output="screen">
			<remap from="/joint_states" to="joint_states" />
		</node>

		<!-- start rb_theron_control nodes -->
		<include file="$(find rb_theron_control)/launch/rb_theron_control.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="id_robot" value="$(arg id_robot)"/>
			<arg name="sim" value="true"/>
			<arg name="use_ros_planar_move_plugin" default="$(arg use_ros_planar_move_plugin)"/>
		</include>

		<!-- robot_localization nodes, publishes transformation world->odom->base_footprint -->
		<include file="$(find rb_theron_localization)/launch/rb_theron_localization_basic.launch"/>

		<!-- pad -->
		<include file="$(find rb_theron_pad)/launch/rb_theron_pad.launch"/>

		<!-- use static_transform_publisher to define map->odom transform    -->
		<!-- only use if you arenÂ´t using a localization algorithm like amcl -->
		<!--node if="$(arg fake_map_transform)" pkg="tf" type="static_transform_publisher" name="static_map_broadcaster" args="0 0 0 0 0 0 map $(arg namespace)odom 100" /-->

		<!-- amcl and map server base-->
		<include if="$(arg launch_mapserver)" file="$(find rb_theron_localization)/launch/map_server.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="map_file" value="$(arg map_file)"/>
			<arg name="frame_id" value="$(arg global_frame)"/>
		</include>

		<include if="$(arg launch_amcl)" file="$(find rb_theron_localization)/launch/amcl.launch">
			<arg name="scan_topic" value="front_rgbd_camera/point_cloud_scan"/>
			<arg name="global_frame" value="$(arg global_frame)"/>
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="x_init_pose" value="$(arg x_init_pose)"/>
			<arg name="y_init_pose" value="$(arg y_init_pose)"/>
			<arg name="z_init_pose" value="$(arg z_init_pose)"/>
			<arg name="init_yaw" value="$(arg init_yaw)"/>
		</include>

		<!-- move base -->
		<include if="$(arg launch_move_base)" file="$(find rb_theron_navigation)/launch/dual_move_base.launch">
			<arg name="prefix" value="$(arg prefix)"/>
			<arg name="global_frame" value="$(arg global_frame)"/>
		</include>

		<!-- gmapping -->
		<include if="$(arg launch_gmapping)" file="$(find rb_theron_localization)/launch/gmapping.launch">
			<arg name="prefix" value="$(arg prefix)"/>
		</include>

		<!-- base_hw_sim -->
		<!-- TODO -->
		<!-- <group if="$(arg launch_base_hw_sim)">

			<include file="$(find robotnik_base_hw_sim)/launch/rb_theron_hw_sim.launch">
				<arg name="prefix" value="$(arg prefix)"/>
			</include>

			<include file="$(find battery_estimation)/launch/table_battery.launch"/>

			<include file="$(find charge_manager)/launch/charge_manager.launch">
				<arg name="inverted_contact_relay_input" value="false" />
			</include>

		</group> -->

		<!-- Pointcloud to laserscan -->
		<include file="$(find rb_theron_navigation)/launch/rgbd_to_laserscan.launch"/>

	</group>


	<include if="$(arg launch_perception)" file="$(find rb_theron_perception)/launch/perception_complete.launch">
		<arg name="id_robot" value="$(arg id_robot)"/>
		<arg name="run_reflector_locator" value="$(arg launch_reflector_locator)"/>
		<arg name="run_ar_locator" value="true"/>
	</include>

	<include if="$(arg launch_navigation)" file="$(find rb_theron_navigation)/launch/navigation_complete.launch">
		<arg name="id_robot" value="$(arg id_robot)"/>
		<arg name="has_docker" value="true"/>
		<arg name="run_laser_docker" value="true"/>
	</include>

	<group if="$(arg launch_rlc)">
		<include file="$(find rb_theron_robot_local_control)/launch/robot_local_control.launch">
			<arg name="id_robot" value="$(arg id_robot)"/>
		</include>

		<include if="$(arg launch_rostful)" file="$(find rb_theron_robot_local_control)/launch/rostful_server.launch">
			<arg name="id_robot" value="$(arg id_robot)"/>
			<arg name="host" value="$(arg rostful_host)"/>
			<arg name="port" value="$(arg rostful_port)"/>
			<arg name="init_delay" value="$(arg rostful_init_delay)"/>
		</include>

	</group>

</launch>
